<?php
/**
 * Created by PhpStorm.
 * User: naomileow
 * Date: 14/11/14
 * Time: 12:23 PM
 */

namespace Phortress\Dephenses\Engine;


use Phortress\Dephenses\Error;
use Phortress\Dephenses\Taint\Annotation;
use Phortress\Dephenses\Taint\SanitisingFunctions;
use Phortress\Dephenses\Taint\TaintResult;
use PhpParser\Node\Expr\FuncCall;

class SQLVulnerabilityChecker extends VulnerabilityChecker{

//	public function __construct($parseTree){
//		parent::__construct($parseTree);
//		$this->vulnerabilitySinks = $this->getSQLInjectionVulnerableNodes();
//	}

//	protected function getSQLInjectionVulnerableNodes(){
//		$sinkCondition = function ($node){
//			if($node instanceof FuncCall){
//				return Sinks::isSQLInjectionSinkFunction($node);
//			}else{
//				return false;
//			}
//		};
//		return parent::getNodesToCheck($sinkCondition);
//	}


	protected function checkVulnerability(FuncCall $funcCall, $argTaints){
		$max_taint = Annotation::UNASSIGNED;
		foreach($argTaints as $argTaint){
			$taint = $this->getArgumentTaint($argTaint);
			$max_taint = max($taint, $max_taint);
		}
		if($max_taint >= Annotation::UNKNOWN){
			$message = $this->constructMessage($max_taint, $funcCall);
			$this->messages[] = $message;
		}
	}

	protected function getArgumentTaint(TaintResult $argTaint){
		$taintVal = $argTaint->getTaint();
		$sanitisingFuncs = $argTaint->getSanitisingFunctions();
		if($this->containsSQLSanitisingFunction($sanitisingFuncs)){
			return Annotation::SAFE;
		}else{
			return $taintVal;
		}
	}

	private function containsSQLSanitisingFunction(array $funcs){
		foreach($funcs as $func){
			if(SanitisingFunctions::isSQLSanitisingFunction($func)){
				return true;
			}
		}
		return false;
	}

	private function constructMessage($annotation, FuncCall $funcCall){
		$message = "SQL Injection Vulnerability was found in a call to ". $funcCall->name;
		if($annotation == Annotation::UNKNOWN){
			$message = "A possible " . $message;
			return new Message($message, $funcCall);
		}else if($annotation == Annotation::TAINTED){
			$message = "An ". $message;
			return new Error($message, $funcCall);
		}
	}


} 