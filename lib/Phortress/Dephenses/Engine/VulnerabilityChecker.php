<?php

namespace Phortress\Dephenses\Engine;


use Phortress\Dephenses\Error;
use Phortress\Dephenses\Message;
use Phortress\Dephenses\Taint\Annotation;
use Phortress\Dephenses\Taint\TaintResult;
use Phortress\Dephenses\Warning;
use PhpParser\Node;
use PhpParser\Node\Expr\FuncCall;

abstract class VulnerabilityChecker {

	protected $messages = array();
	protected $defaultMessageHeader;

	abstract protected function containsSanitisingFunction(array $funcs);

	abstract protected function isVulnerabilitySink(FuncCall $funcCall);

	public function getMessages(){
		return $this->messages;
	}

	public function checkVulnerability(Node $node, array $taints){
		if($node instanceof FuncCall){
			$this->checkFuncCallVulnerability($node, $taints);
		}else{
			$this->checkSinkNodeVulnerability($node, $taints);
		}
	}

	protected  function checkFuncCallVulnerability(FuncCall $funcCall, $argTaints){
		if(!$this->isVulnerabilitySink($funcCall)){
			return;
		}
		$this->checkTaints($funcCall, $argTaints);
	}

	protected function checkSinkNodeVulnerability(Node $node, array $taints){

	}

	public function checkTaints(Node $node, $argTaints){
		$max_taint = Annotation::UNASSIGNED;
		foreach($argTaints as $argTaint){
			$taint = $this->getArgumentTaint($argTaint);
			$max_taint = max($taint, $max_taint);
		}
		if($max_taint >= Annotation::UNKNOWN){
			$message = $this->constructMessage($max_taint, $node);
			$this->messages[] = $message;
		}
	}

	protected function getArgumentTaint(TaintResult $argTaint){
		$taintVal = $argTaint->getTaint();
		$sanitisingFuncs = $argTaint->getSanitisingFunctions();
		if($this->containsSanitisingFunction($sanitisingFuncs)){
			return Annotation::SAFE;
		}else{
			return $taintVal;
		}
	}

	protected function constructMessage($annotation, FuncCall $funcCall){
		$message = $this->defaultMessageHeader . $funcCall->name;
		if($annotation == Annotation::UNKNOWN){
			$message = "A possible " . $message;
			return new Warning($message, $funcCall);
		}else if($annotation == Annotation::TAINTED){
			$message = "An ". $message;
			return new Error($message, $funcCall);
		}
	}
} 