<?php

namespace Phortress\Dephenses\Engine;


abstract class VulnerabilityFinder {


	/**
	 * Array containing potentially vulnerable function calls with parameters that are tainted and
	 * unsanitised
	 */
	protected $vulnerableNodes = array();

	/**
	 * The parseTree of the program that is being analysed
	 */
	protected $parseTree;

	public function __construct($parseTree){
		$this->parseTree = $parseTree;
	}

	/**
	 * @param Conditions which indicate that a node is vulnerable.
	 * @return Node[] An array of potentially vulnerable function calls
	 */
	protected function getNodesToCheck($sinkCondition){

		$traverser = new NodeTraverser();
		$finder = new NodeFinder($sinkCondition);
		$traverser->addVisitor($finder);
		$traverser->traverse($this->parseTree);
		return $finder->getNodes();

	}


	abstract public function findVulnerabilities();
} 